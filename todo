linkedlist is not multithread safe, in what situation it will fail?

dequeue on linkedlist

in map, keyset and valueset is not a view but backed by real stuff, changes to these sets will change the map

hashmap allows null key but treemap doesn't
hashmap is array backed
when hashmap is getting too large, it will be transformed to be backed by a tree, similar to treemap
linkedhashmap perserves the insert order, (can be configured as insert order), can automatically remove elements based on fixed size
iterations on linkedhashmap will skip empty buckets

iterate hashmap will cover the capacity, linkedhashmap does not have this problem

concurrenthashmap use segements in hashtable, different thread accessing different
segments won't block each other.
aggregate operation like size(), isEmpty() may be unexpected in multithreading for concurrenthashmap
iterators on concurrenthashmap will never throw concurrentmodificationexception

if order(sorted) is required, use concurrentskiplistmap

hashtable vs hashmap
hashtable is synchronized, hashmap isn't
hashtable does not allow null key and value, hashmap allows

enummap has performance improvements

SynchronousQueue has only take() and put(), they are blocking operations
for example, if take() is called on an empty queue, it is blocked until other
threads put an element on the queue

transferqueue, producer is blocked until the produced element is consumed.
synchronousqueue is a blocking queue, but the produce is not blocked (if not null) after producing an element.

"for each" uses iterator

differences stream.foreach and foreach
- stream.foreach access collections without order, in sequential stream, it does not occur